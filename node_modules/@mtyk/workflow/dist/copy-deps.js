"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var args = process.argv.slice(2);
const chokidar = require("chokidar");
const path = require("path");
const fsPromises = require("fs/promises");
const fs = require("fs");
const { debounce } = require("lodash");
const md5File = require("md5-file");
const { execSync } = require("child_process");
const { rmSync } = require("fs");
const clean = Array.from(args).join("").indexOf("--clean") >= 0;
function filesAreDifferent(a, b) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const md5a = yield md5File(a);
            const md5b = yield md5File(b);
            return md5a !== md5b;
        }
        catch (e) {
            return true;
        }
    });
}
function copyDeps(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { dependencies, projectLocations: projectToDepMap, parentDir } = options;
        const ignored = ["**/node_modules", "**/.git"];
        let startTime = new Date();
        for (const project in projectToDepMap) {
            const projectPath = path.join(parentDir, project);
            for (const depSrcPath in projectToDepMap[project]) {
                const dep = dependencies.find((dep) => depSrcPath.indexOf(dep) === 0);
                if (!dep) {
                    throw new Error(`Dependency src path ${depSrcPath} not listed in dependencies`);
                }
                const projectDepPath = path.join(projectPath, (_a = projectToDepMap[project][depSrcPath]) !== null && _a !== void 0 ? _a : "", dep);
                if (clean) {
                    console.log(`Removing ${projectDepPath}`);
                    rmSync(projectDepPath, { recursive: true, force: true });
                }
                try {
                    fs.statSync(projectPath).isDirectory;
                }
                catch (e) {
                    console.error(`Error watching directory ${projectPath}, are you running from the root directory?`);
                }
                chokidar.watch(projectDepPath, { ignored, ignoreInitial: true }).on("all", debounce((event, filePath) => __awaiter(this, void 0, void 0, function* () {
                    if (new Date().getTime() - startTime.getTime() < 2500) {
                        return;
                    }
                    const depDest = path.join(parentDir, depSrcPath);
                    const cmd = `rsync -au "${projectDepPath}/" "${depDest}"`;
                    console.log(`Running ${cmd}`);
                    if (!options.dryRun) {
                        execSync(cmd, { stdio: "inherit" });
                    }
                }), 1000));
            }
        }
        for (const dependency of dependencies) {
            chokidar
                .watch([
                path.join(parentDir, dependency) + "/**/*.(t|j)s(x)?",
                ...(dependency === "mtyk-frontend"
                    ? [path.join(parentDir, "mtyk-frontend", "/**/babel.js")]
                    : []),
            ], {
                ignored,
            })
                .on("all", (event, filePath) => __awaiter(this, void 0, void 0, function* () {
                for (const project in projectToDepMap) {
                    const thisProjectDepMap = projectToDepMap[project];
                    const withExtraPath = Object.keys(thisProjectDepMap).find((depSrcPath) => depSrcPath.indexOf(dependency) === 0);
                    const pathForThisDep = thisProjectDepMap[withExtraPath];
                    if (typeof pathForThisDep !== "undefined") {
                        const extraPath = withExtraPath.substr(dependency.length + 1);
                        let parentDirRelativePath = filePath.substr(parentDir.length + 1);
                        if (extraPath.length) {
                            let before = parentDirRelativePath;
                            parentDirRelativePath = parentDirRelativePath.replace(`${dependency}/${extraPath}`, dependency);
                            if (before === parentDirRelativePath) {
                                return;
                            }
                        }
                        const projectPath = path.join(parentDir, project, pathForThisDep, parentDirRelativePath);
                        const outFolder = path.dirname(projectPath);
                        if (yield filesAreDifferent(filePath, projectPath)) {
                            if (!options.dryRun) {
                                yield fsPromises.mkdir(outFolder, { recursive: true });
                                yield fsPromises.copyFile(filePath, projectPath);
                            }
                            console.log(`${projectPath} updated`);
                        }
                        else {
                        }
                    }
                }
            }));
        }
    });
}
exports.default = copyDeps;
//# sourceMappingURL=copy-deps.js.map